diff --git a/src/core/runtime/amd_aql_queue.cpp b/src/core/runtime/amd_aql_queue.cpp
index 3a4352f..e49bb10 100644
--- a/src/core/runtime/amd_aql_queue.cpp
+++ b/src/core/runtime/amd_aql_queue.cpp
@@ -246,6 +246,16 @@ AqlQueue::AqlQueue(GpuAgent* agent, size_t req_size_pkts, HSAuint32 node_id, Scr
     HSA::hsa_signal_destroy(amd_queue_.queue_inactive_signal);
   });
 
+  // Call SetCUMasking if there is a global cu mask
+  if (core::Runtime::runtime_singleton_->flag().has_global_cu_mask()) {
+     unsigned long int cu_mask_val =   // 8 byte copy 
+       core::Runtime::runtime_singleton_->flag().global_cu_mask();
+     const uint32_t*cu_mask = (const uint32_t*) &cu_mask_val;
+     SetCUMasking(
+       core::Runtime::runtime_singleton_->flag().global_cu_mask_size(),
+       cu_mask);
+  }
+
   if (core::g_use_interrupt_wait) {
     ScopedAcquire<KernelMutex> _lock(&queue_lock_);
     queue_count_++;
diff --git a/src/core/runtime/hsa_ext_amd.cpp b/src/core/runtime/hsa_ext_amd.cpp
index d65d0dc..38beacc 100644
--- a/src/core/runtime/hsa_ext_amd.cpp
+++ b/src/core/runtime/hsa_ext_amd.cpp
@@ -521,6 +521,9 @@ hsa_status_t hsa_amd_async_function(void (*callback)(void* arg), void* arg) {
 hsa_status_t hsa_amd_queue_cu_set_mask(const hsa_queue_t* queue,
                                                uint32_t num_cu_mask_count,
                                                const uint32_t* cu_mask) {
+  // do not allow use of API when global cu mask is set
+  if (core::Runtime::runtime_singleton_->flag().has_global_cu_mask())
+    return(HSA_STATUS_ERROR);
   TRY;
   IS_OPEN();
   IS_BAD_PTR(cu_mask);
diff --git a/src/core/util/flag.h b/src/core/util/flag.h
index f3b4141..123a11c 100644
--- a/src/core/util/flag.h
+++ b/src/core/util/flag.h
@@ -76,6 +76,21 @@ class Flag {
     visible_gpus_ = os::GetEnvVar("ROCR_VISIBLE_DEVICES");
     filter_visible_gpus_ = os::IsEnvVarSet("ROCR_VISIBLE_DEVICES");
 
+    global_cu_mask_str_ = os::GetEnvVar("ROCR_GLOBAL_CU_MASK");
+    has_global_cu_mask_  = os::IsEnvVarSet("ROCR_GLOBAL_CU_MASK");
+    if( has_global_cu_mask_) {
+      size_t pos = global_cu_mask_str_.find(":");
+      if ( pos != std::string::npos ) {
+	// Parse number and mask separated by :
+        global_cu_mask_size_ = (std::stoi(global_cu_mask_str_.substr(0,pos)))*32;
+        global_cu_mask_ = std::stoul(global_cu_mask_str_.substr(pos+1),nullptr,16);
+      } else {
+	// No delimiter, use default size
+        global_cu_mask_ = std::stoul(global_cu_mask_str_,nullptr,16);
+        global_cu_mask_size_ = 64;
+      }
+    }
+
     var = os::GetEnvVar("HSA_RUNNING_UNDER_VALGRIND");
     running_valgrind_ = (var == "1") ? true : false;
 
@@ -158,6 +173,11 @@ class Flag {
 
   bool filter_visible_gpus() const { return filter_visible_gpus_; }
 
+  std::string global_cu_mask_str() const { return global_cu_mask_str_; }
+  bool has_global_cu_mask() const { return has_global_cu_mask_; }
+  uint32_t global_cu_mask_size() const { return global_cu_mask_size_;}
+  unsigned long int global_cu_mask() const { return global_cu_mask_;}
+
   uint32_t max_queues() const { return max_queues_; }
 
   size_t scratch_mem_size() const { return scratch_mem_size_; }
@@ -192,6 +212,11 @@ class Flag {
   bool filter_visible_gpus_;
   std::string visible_gpus_;
 
+  bool has_global_cu_mask_;
+  std::string global_cu_mask_str_;
+  uint32_t global_cu_mask_size_;
+  unsigned long int global_cu_mask_;
+
   uint32_t max_queues_;
 
   size_t scratch_mem_size_;
